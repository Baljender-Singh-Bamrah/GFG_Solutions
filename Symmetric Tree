/*
class Node {
public:
    int data;
    Node *left, *right;

    Node(int val) {
        data = val;
        left = right = nullptr;
    }
};
*/
class Solution {
  public:
    bool solve(Node* left, Node* right) {
        if(!left || !right)
            return left == right;
        
        if(left->data != right->data) 
            return false;
        
        return solve(left->left, right->right) && solve(left->right, right->left);
    }
  
    bool isSymmetric(Node* root) {
        return root == NULL || solve(root->left, root->right);
    }
};

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

My approach :
-----------
class Solution {
  public:
  
    bool solve(Node *l, Node *r) {
        if(!l || !r) return l==r;
        
        if(l->left && r->right) {
            if(l->left->data == r->right->data) {
                solve(l->left, r->right);
            }
            else
                return false;
        } else
            return false;
        
        if(l->right && r->left) {
            if( l->right->data == r->left->data) {
                solve(l->right, r->left);
            }
            else
                return false;
        } else 
            return false;
            
        return true;
    }
    
    bool isSymmetric(Node* root) {
        // Code here
        if(!root) return true;
        
        if( root->left && root->right && root->left->data != root->right->data)
            return false;
            
        return solve(root->left, root->right);
    }
};
