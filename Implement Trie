class Node {
    public: 
    Node *children[26];
    bool flag;
    
    Node() {
        flag = false;
        for(int i=0 ; i<26 ; i++) {
            children[i] = nullptr;
        }
    }
};
// User function template for C++
class Trie {
    Node *root;
  public:

    Trie() {
        // implement Trie
        root = new Node();
    }

    void insert(string &word) {
        // insert word into Trie
        Node *temp = root;
        for(char ch : word) {
            int idx = ch-'a';
            if(temp->children[idx]==NULL) {
                temp->children[idx] = new Node();
            }
            temp = temp->children[idx];
        }
        temp->flag = true;
    }

    bool search(string &word) {
        // search word in the Trie
        Node *temp = root;
        for(char ch : word) {
            int idx = ch-'a';
            if(temp->children[idx]==NULL) {
                return false;
            }
            temp = temp->children[idx];
        }
        return temp->flag;
    }

    bool isPrefix(string &word) {
        // search prefix word in the Trie
        Node *temp = root;
        for(char ch : word) {
            int idx = ch-'a';
            if(temp->children[idx]==NULL) {
                return false;
            }
            temp = temp->children[idx];
        }
        return true;
    }
};
