class Solution {
  public:
    vector<int> vec;
    
    void inorder(Node* root) {
        if(root) {
            inorder(root->left);
            vec.push_back(root->data);
            inorder(root->right);
        }
    }
  
    // Function to serialize a tree and return a list containing nodes of tree.
    vector<int> serialize(Node *root) {
        inorder(root);
        
        return vec;
    }
    
    Node* solve(vector<int> &arr, int start, int end) {
        if(start > end)
            return NULL;
        
        int mid = (start+end)/2;
        
        Node* node = new Node(arr[mid]);
        
        node->left  = solve(arr, start, mid-1);
        node->right = solve(arr, mid+1, end);
        
        return node;
    }

    // Function to deserialize a list and construct the tree.
    Node *deSerialize(vector<int> &arr) {
        int n = arr.size();
        
        return solve(arr, 0, n-1);
    }
};
